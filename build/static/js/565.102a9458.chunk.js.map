{"version":3,"file":"static/js/565.102a9458.chunk.js","mappings":"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","sources":["components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService()\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n        \n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n\n    const {name, description, thumbnail, homepage, wiki} = char\n    const notFoundImageStyle = thumbnail.indexOf('image_not_available') !== -1 ? {objectFit: 'contain'} : null;\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} style={notFoundImageStyle} alt=\"Random character\" className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default RandomChar;\n","\nimport React, { useState, useEffect, useRef } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport './charList.scss';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nconst CharList = (props) =>  {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n\n    const onCharListLoaded = (newCharList) => {\n        \n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList((charList) => charList = [...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended);\n\n    }\n\n    // using ref to set change className to selected character:\n    const charRefList = useRef([]);\n \n    const focusOnChar = (index) => {\n        charRefList.current.forEach(item => item.classList.remove('char__item_selected'));\n        charRefList.current[index].classList.add('char__item_selected');\n    }\n    \n    const duration = 500;\n\n    const renderItems = (list) => {\n        return <TransitionGroup component={'ul'} className=\"char__grid\">\n                {list.map((char, index) => (\n                    <CSSTransition\n                    timeout={duration}\n                    classNames=\"chars\"\n                    key={char.id}>\n                        <li \n                            ref = {el => charRefList.current[index] = el}  // el - link on DOM-element\n                            className=\"char__item\"\n                            onClick={() => {\n                                props.onCharSelected(char.id);\n                                focusOnChar(index);\n                                }}\n                            onKeyDown = {(event) => {\n                                if(event.key === ' ' || event.key === 'Enter') {\n                                    props.onCharSelected(char.id);\n                                    focusOnChar(index);\n                                }\n                            }}>\n                                <img src={char.thumbnail} style={char.thumbnail.indexOf('image_not_available') !== -1 ? {objectFit: 'unset'} : null} alt={char.name}/>\n                                <div className=\"char__name\">{char.name}</div>\n                        </li>\n                    </CSSTransition>\n                ))}\n            </TransitionGroup>\n    }\n\n    const items = renderItems(charList);\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading   ? <Spinner style={{margin: '0 auto'}}/> : null;\n\n\n    return (\n        <div className=\"char__list\">\n            {spinner}\n            {errorMessage}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                style={{'display': charEnded ? 'none' : 'block'}}\n                disabled={newItemLoading}\n                onClick={() => onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService'\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n\n   const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        const {charId} = props;\n        if(!charId){\n            return;\n        }\n\n        clearError()\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton} \n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    const notFoundImageStyle = thumbnail.indexOf('image_not_available') !== -1 ? {objectFit: 'contain'} : null;\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} style={notFoundImageStyle} alt={name}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                <Comicses char={char}/>\n            </ul>\n        </>\n    )\n}\n\nconst Comicses = ({char}) => {\n    if(char.comics.length < 1) {\n        return (\n                \"Sorry... There is no comic with this caracter\"\n        )\n    }\n    return char.comics.map((comics,i) => {\n        return  (\n        <li className=\"char__comics-item\" key={i}>\n            {comics.name}\n        </li>\n        )\n    })\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number // set the type of props\n}\n\nexport default CharInfo;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo)\n        this.setState({error: true})\n    }\n    render () {\n        if(this.state.error){\n            return <ErrorMessage/>\n        }\n        \n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import { useState } from 'react';\nimport { useFormik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\n\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss'\n\nconst validate = values => {\n\n    const error = {};\n\n    if(!values.charName) {\n        error.charName = 'This field is required'\n    }\n\n    return error;\n}\n\nconst CharSearchForm = () => {\n    const [charInfo, setCharInfo] = useState(null);\n\n    const {error, clearError, getCharacterByName} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setCharInfo(char)\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded)\n    }\n\n    const formik = useFormik({\n        initialValues: {\n            charName: ''\n        },\n        validate,\n        onSubmit: values => updateChar(values.charName)\n    })\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const result = !charInfo ? null : charInfo.length > 0 ? \n                            <div className=\"search__wrapper\">\n                                <div className='search-success'>There is! Visit <span style={{textDecoration: 'underline'}}>{charInfo[0].name}</span> page?</div>\n                                <Link to={`/characters/${charInfo[0].id}`} className=\"button button__secondary\">\n                                    <div className=\"inner\">To page</div>\n                                </Link>\n                            </div>\n                             : \n                            <div className='error'>The character was not found. Check the name and try again</div>\n\n    return (\n        <form className='form' onSubmit={formik.handleSubmit}>\n            <h2 className='form__title'>Or find a character by name:</h2>\n            <input \n                id='charName' \n                type='text' \n                name='charName' \n                placeholder='Enter name'\n                value={formik.values.charName}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}/>\n            <button type='submit' className=\"button button__main\">\n                    <div className=\"inner\">Find</div>\n            </button>\n            {formik.errors.charName && formik.touched.charName ? <div className='error'>{formik.errors.charName}</div> : null}\n            {errorMessage}\n            {result}\n        </form>\n    )\n}\n\nexport default CharSearchForm","import {useState} from 'react'\nimport { Helmet } from 'react-helmet';\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n    \n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id)\n    }\n    \n    return (\n        <>\n            <Helmet>\n                <meta \n                    name=\"description\" \n                    content=\"Marvel information portal\"/>\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm/>\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;"],"names":["View","_ref","char","name","description","thumbnail","homepage","wiki","notFoundImageStyle","indexOf","objectFit","_jsxs","className","children","_jsx","src","style","alt","href","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","list","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","charRefList","useRef","focusOnChar","index","current","forEach","item","classList","remove","add","items","TransitionGroup","component","map","CSSTransition","timeout","classNames","ref","el","onCharSelected","onKeyDown","event","key","margin","disabled","_Fragment","Comicses","_ref2","comics","i","charId","skeleton","Skeleton","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","_createClass","value","errorInfo","console","log","this","setState","Component","validate","values","charName","charInfo","setCharInfo","getCharacterByName","formik","useFormik","initialValues","onSubmit","result","textDecoration","Link","to","handleSubmit","type","placeholder","onChange","handleChange","onBlur","handleBlur","errors","touched","selectedChar","Helmet","RandomChar","CharList","CharInfo","CharSearchForm","decoration"],"sourceRoot":""}