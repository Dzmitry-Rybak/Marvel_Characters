{"version":3,"file":"static/js/728.cc7dd4ae.chunk.js","mappings":"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","sources":["components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCaracter, clearError} = useMarvelService()\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n        \n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCaracter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n\n    const {name, description, thumbnail, homepage, wiki} = char\n    const notFoundImageStyle = thumbnail.indexOf('image_not_available') !== -1 ? {objectFit: 'contain'} : null;\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} style={notFoundImageStyle} alt=\"Random character\" className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nexport default RandomChar;\n","\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport './charList.scss';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService'\n\nconst CharList = (props) =>  {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n\n    const onCharListLoaded = (newCharList) => {\n        \n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList((charList) => charList = [...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended);\n\n    }\n\n    // using ref to set change className to selected character:\n    const charRefList = useRef([]);\n \n    const focusOnChar = (index) => {\n        charRefList.current.forEach(item => item.classList.remove('char__item_selected'));\n        charRefList.current[index].classList.add('char__item_selected');\n    }\n    \n    const renderItems = (list) => {\n        return list.map((char, index) => (\n            <li \n                ref = {el => charRefList.current[index] = el}  // el - link on DOM-element\n                className=\"char__item\"\n                key={char.id}\n                onClick={() => {\n                    props.onCharSelected(char.id);\n                    focusOnChar(index);\n                    }}\n                onKeyDown = {(event) => {\n                    if(event.key === ' ' || event.key === 'Enter') {\n                        props.onCharSelected(char.id);\n                        focusOnChar(index);\n                    }\n                }}>\n                    <img src={char.thumbnail} style={char.thumbnail.indexOf('image_not_available') !== -1 ? {objectFit: 'unset'} : null} alt={char.name}/>\n                    <div className=\"char__name\">{char.name}</div>\n            </li>\n        ))\n    }\n\n    const items = renderItems(charList);\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading   ? <Spinner style={{margin: '0 auto'}}/> : null;\n\n\n    return (\n        <div className=\"char__list\">\n            {spinner}\n            {errorMessage}\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n            <button \n                className=\"button button__main button__long\"\n                style={{'display': charEnded ? 'none' : 'block'}}\n                disabled={newItemLoading}\n                onClick={() => onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService'\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCaracter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n\n   const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        const {charId} = props;\n        if(!charId){\n            return;\n        }\n\n        clearError()\n        getCaracter(charId)\n            .then(onCharLoaded)\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton} \n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    const notFoundImageStyle = thumbnail.indexOf('image_not_available') !== -1 ? {objectFit: 'contain'} : null;\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} style={notFoundImageStyle} alt={name}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                <Comicses char={char}/>\n            </ul>\n        </>\n    )\n}\n\nconst Comicses = ({char}) => {\n    if(char.comics.length < 1) {\n        return (\n                \"Sorry... There is no comic with this caracter\"\n        )\n    }\n    return char.comics.map((comics,i) => {\n        return  (\n        <li className=\"char__comics-item\" key={i}>\n            {comics.name}\n        </li>\n        )\n    })\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number // set the type of props\n}\n\nexport default CharInfo;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo)\n        this.setState({error: true})\n    }\n    render () {\n        if(this.state.error){\n            return <ErrorMessage/>\n        }\n        \n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import {useState} from 'react'\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n    \n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id)\n    }\n    \n    return (\n        <>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <ErrorBoundary>\n                    <CharInfo charId={selectedChar}/>\n                </ErrorBoundary>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;"],"names":["View","_ref","char","name","description","thumbnail","homepage","wiki","notFoundImageStyle","indexOf","objectFit","_jsxs","className","children","_jsx","src","style","alt","href","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","error","getCaracter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","charRefList","useRef","focusOnChar","index","current","forEach","item","classList","remove","add","items","map","ref","el","onCharSelected","onKeyDown","event","key","margin","disabled","_Fragment","Comicses","_ref2","comics","i","charId","skeleton","Skeleton","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","_createClass","value","errorInfo","console","log","this","setState","Component","selectedChar","RandomChar","CharList","CharInfo","decoration"],"sourceRoot":""}